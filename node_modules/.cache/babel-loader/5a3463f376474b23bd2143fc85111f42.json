{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\maris\\\\Desktop\\\\Enda_projektid_oppimiseks\\\\inspire-music-app\\\\src\\\\components\\\\Player.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from 'react'; // Import component.\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"; // Import specific item.\n\nimport { faPlay, faAngleLeft, faAngleRight } from \"@fortawesome/free-solid-svg-icons\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Player = ({\n  currentSong,\n  isPlaying,\n  setIsPlaying\n}) => {\n  _s();\n\n  // Add access to Player\n  // Ref - To select specific HTML tag in component, use Ref.\n  const audioRef = useRef(null); // Null is a starting value.\n  // Event handlers.\n  // If playing, then pause it. If pause, then play it.\n\n  const playSongHandler = () => {\n    if (isPlaying) {\n      audioRef.current.pause();\n      setIsPlaying(!isPlaying); // Setting the state to opposite what it was.\n    } else {\n      audioRef.current.play();\n      setIsPlaying(!isPlaying); // Setting the state to opposite what it was.\n    }\n  };\n\n  const timeUpdateHandler = e => {\n    // Add time update handler. // Add access to event.\n    const current = e.target.currentTime; // Add access to currentTime.\n\n    const duration = e.target.duration; // Add access to duration.\n\n    setSongInfo({ ...songInfo,\n      currentTime: current,\n      duration\n    }); // Take all song info, but update only current song duration\n  };\n\n  const getTime = time => {\n    return (// Divide time with 60, to get the minute. Math.floor removes decimel points.\n      Math.floor(time / 60) + \":\" + (\"0\" + Math.floor(time % 60)).slice(-2) // Every time it reached 60, it starts 0 again.\n\n    );\n  }; // State\n\n\n  const [songInfo, setSongInfo] = useState({\n    // Add state for songinfo.\n    currentTime: null,\n    // Starting from 0 as default value.\n    duration: null // Default value.\n\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"player\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"time-control\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: getTime(songInfo.currentTime)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: getTime(songInfo.currentTime)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 18\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"play-control\",\n      children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        className: \"skip-back\",\n        size: \"2x\",\n        icon: faAngleLeft\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this), \" \", /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        onClick: playSongHandler,\n        className: \"play\",\n        size: \"2x\",\n        icon: faPlay\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this), \" \", \" \", /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        className: \"skip-forward\",\n        size: \"2x\",\n        icon: faAngleRight\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      onTimeUpdate: timeUpdateHandler,\n      ref: audioRef // Add access to timeupdateHandler function // Pass audioRef property\n      ,\n      src: currentSong.audio\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Player, \"u4jwgk6N3gfqjcPdlWHAvDYOeWw=\");\n\n_c = Player;\nexport default Player;\n\nvar _c;\n\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"sources":["C:/Users/maris/Desktop/Enda_projektid_oppimiseks/inspire-music-app/src/components/Player.js"],"names":["React","useRef","useState","FontAwesomeIcon","faPlay","faAngleLeft","faAngleRight","Player","currentSong","isPlaying","setIsPlaying","audioRef","playSongHandler","current","pause","play","timeUpdateHandler","e","target","currentTime","duration","setSongInfo","songInfo","getTime","time","Math","floor","slice","audio"],"mappings":"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","sourcesContent":["import React, { useRef, useState } from 'react';\r\n// Import component.\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n// Import specific item.\r\nimport { faPlay, faAngleLeft, faAngleRight } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Player = ({ currentSong, isPlaying, setIsPlaying }) => { // Add access to Player\r\n    // Ref - To select specific HTML tag in component, use Ref.\r\n    const audioRef = useRef(null); // Null is a starting value.\r\n    // Event handlers.\r\n    // If playing, then pause it. If pause, then play it.\r\n    const playSongHandler = () => {\r\n       if (isPlaying) {\r\n           audioRef.current.pause();\r\n           setIsPlaying(!isPlaying); // Setting the state to opposite what it was.\r\n       }else {\r\n           audioRef.current.play();\r\n           setIsPlaying(!isPlaying); // Setting the state to opposite what it was.\r\n       }\r\n    };\r\n    const timeUpdateHandler = (e) => { // Add time update handler. // Add access to event.\r\n        const current = e.target.currentTime // Add access to currentTime.\r\n        const duration = e.target.duration; // Add access to duration.\r\n        setSongInfo({ ...songInfo, currentTime: current, duration }) // Take all song info, but update only current song duration\r\n    };\r\n    const getTime = (time) => {\r\n        return (\r\n            // Divide time with 60, to get the minute. Math.floor removes decimel points.\r\n            Math.floor(time / 60) + \":\" + (\"0\" + Math.floor(time % 60)).slice(-2) // Every time it reached 60, it starts 0 again.\r\n        );\r\n    };\r\n    // State\r\n    const [songInfo, setSongInfo] = useState({ // Add state for songinfo.\r\n        currentTime: null, // Starting from 0 as default value.\r\n        duration: null, // Default value.\r\n    })\r\n    return(\r\n        <div className=\"player\">\r\n            <div className=\"time-control\">\r\n                <p>{getTime(songInfo.currentTime)}</p> {/* Display song current time */}\r\n                <input type=\"range\" />\r\n                 <p>{getTime(songInfo.currentTime)}</p>\r\n            </div>\r\n            <div className=\"play-control\">\r\n                <FontAwesomeIcon className=\"skip-back\" size=\"2x\" icon={faAngleLeft} /> {/* Display faAngleLeft icon*/}\r\n                <FontAwesomeIcon onClick={playSongHandler} className=\"play\" size=\"2x\" icon={faPlay} /> {/* Display faPlay icon*/} {/* Add playSongHandler */}\r\n                <FontAwesomeIcon className=\"skip-forward\" size=\"2x\" icon={faAngleRight} /> {/* Display faAngleRight icon*/}\r\n            </div>\r\n            <audio onTimeUpdate={timeUpdateHandler} ref={audioRef} // Add access to timeupdateHandler function // Pass audioRef property\r\n            src={currentSong.audio}></audio> {/* Pass  along currentSong */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Player;\r\n\r\n"]},"metadata":{},"sourceType":"module"}